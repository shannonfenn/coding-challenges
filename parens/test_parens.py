import pytest

from parens.parens import check_validity

test_cases = [
    ('()', True),
    ('[]', True),
    ('{}', True),
    ('({[]})', True),
    ('[{()}]', True),
    ('()[]{}', True),
    ('(a)b[c]{d}', True),
    ('hello (world) [test] {example}', True),
    ('(', False),
    ('[', False),
    ('{', False),
    (')', False),
    (']', False),
    ('}', False),
    ('([)]', False),
    ('{[}]', False),
    ('(a]b', False),
    ('hello (world] test', False),
    ('((([[[{{{}}}]]])))', True),
    ('((([[[{{{}}}]]]))) extra', True),
    ('((([[[{{{}}}]]]))) )', False),
    ('((((', False),
    ('))))', False),
    ('[[[[', False),
    (']]]]', False),
    ('{{{{', False),
    ('}}}}', False),
    ('({[})]', False),
    ('[({})]', True),
    ('a(b)c[d]e{f}g', True),
    ('a(b)c[d)e{f}g', False),
    ('(a(b)c[d]{e})', True),
    ('(a(b)c[d]{e}}', False),
    ('{[()]}', True),
    ('{[(]', False),
    ('([{}])', True),
    ('([{}]}', False),
    ('text with no brackets', True),
    ('text with (brackets) and [more] {brackets}', True),
    ('unmatched ( bracket', False),
    ('unmatched ) bracket', False),
    ('mismatched [ bracket )', False),
    ('nested ((brackets))', True),
    ('nested ([{brackets}])', True),
    ('invalid nested ([{brackets)}]', False),
    ('multiple ((nested) (brackets))', True),
    ('multiple ((nested) (brackets)', False),
    ('brackets with spaces ( ) [ ] { }', True),
    ('brackets with spaces ( [ { } ] )', True),
    ('brackets with spaces ( [ { } ] ))', False),
    ('non-bracket characters !@#$%^&*_', True),
    ('mixed brackets and characters a(b)c[d]e{f}g', True),
    ('mixed brackets and characters a(b]c[d}e{f}g', False),
]


@pytest.mark.parametrize('input_str, expected', test_cases)
def test_check_validity(input_str, expected):
    assert check_validity(input_str) == expected
